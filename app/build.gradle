plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'com.jaredsburrows.license'
}

android {
    namespace 'ua.com.radiokot.lnaddr2invoice'
    compileSdk 34

    defaultConfig {
        applicationId "ua.com.radiokot.lnaddr2invoice"
        minSdk 21
        targetSdk 34
        versionCode 5
        versionName "1.2.1"

        resConfigs "en"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        viewBinding true
    }
    licenseReport {
        generateHtmlReport = true
        generateJsonReport = false
        generateCsvReport = false
        copyHtmlReportToAssets = true
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.9.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.7.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation "com.airbnb.android:lottie:3.4.0"

    // Must be 2.13 for minSdk 21
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.0'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin:2.13.0'

    implementation "io.insert-koin:koin-core:$koin_version"
    implementation "io.insert-koin:koin-android:$koin_android_version"

    implementation 'io.reactivex.rxjava3:rxjava:3.1.6'
    implementation 'io.reactivex.rxjava3:rxkotlin:3.0.1'
    implementation 'io.reactivex.rxjava3:rxandroid:3.0.2'

    implementation 'io.github.microutils:kotlin-logging:2.1.23'
    implementation 'com.gitlab.mvysny.slf4j:slf4j-handroid:2.0.4'

    implementation 'com.squareup.okhttp3:okhttp:4.9.2'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.10.0'

    testImplementation 'junit:junit:4.13.2'

    testImplementation "io.insert-koin:koin-test:$koin_version"
    testImplementation "io.insert-koin:koin-test-junit4:$koin_version"

    testImplementation ('org.slf4j:slf4j-simple:2.0.6') {
        exclude group: "com.gitlab.mvysny.slf4j", module: "slf4j-handroid"
    }

    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}

// Make the built APKs have a release-style name.
android.applicationVariants.all { variant ->
    variant.outputs.all { output ->
        outputFileName = "${variant.applicationId}-${variant.versionName}.apk"
    }
}

// F-Droid reproducible builds fix: https://gist.github.com/obfusk/61046e09cee352ae6dd109911534b12e
// Android Studio can't find the imports; this does not affect the actual build
// since Gradle can find them just fine.

import com.android.tools.profgen.ArtProfileKt
import com.android.tools.profgen.ArtProfileSerializer
import com.android.tools.profgen.DexFile

project.afterEvaluate {
    tasks.each { task ->
        if (task.name.startsWith("compile") && task.name.endsWith("ReleaseArtProfile")) {
            task.doLast {
                outputs.files.each { file ->
                    if (file.name.endsWith(".profm")) {
                        println("Sorting ${file} ...")
                        def version = ArtProfileSerializer.valueOf("METADATA_0_0_2")
                        def profile = ArtProfileKt.ArtProfile(file)
                        def keys = new ArrayList(profile.profileData.keySet())
                        def sortedData = new LinkedHashMap()
                        Collections.sort keys, new DexFile.Companion()
                        keys.each { key -> sortedData[key] = profile.profileData[key] }
                        new FileOutputStream(file).with {
                            write(version.magicBytes$profgen)
                            write(version.versionBytes$profgen)
                            version.write$profgen(it, sortedData, "")
                        }
                    }
                }
            }
        }
    }
}
